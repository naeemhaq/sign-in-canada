# Pipeline to setup Gluu and Couchbase VMs and setup access policies on the existing keyvault
trigger: 
- feature/pipeline-variable-test
 
pool: 
  vmImage: 'ubuntu-latest'

jobs:
- job: setup_couchbase
  variables:
  - group: couchbase
  
  steps:

  - script: |
      check working directory 
      ls -al $(System.DefaultWorkingDirectory)/
  - task: AzureResourceManagerTemplateDeployment@3
    inputs:
      deploymentScope: 'Resource Group'
      azureResourceManagerConnection: 'Azure subscription 1(a84771c4-d59c-4233-8c65-9e7c8e404eac)'
      subscriptionId: 'a84771c4-d59c-4233-8c65-9e7c8e404eac'
      action: 'Create Or Update Resource Group'
      resourceGroupName: $(rgName)
      location: 'Canada Central'
      csmFile: '$(System.DefaultWorkingDirectory)/gluu-az-template/simpleLinuxVM/template_.json'
      csmParametersFile: '$(System.DefaultWorkingDirectory)/gluu-az-template/simpleLinuxVM/parameters.json'
      overrideParameters: '-adminUsername $(adminUsername) -adminPasswordOrKey "$(adminPasswordOrKey)" -dnsLabelPrefix $(vmName) -networkSecurityGroupName $(networkSecurityGroupName) -OSVersion $(OSVersion) -storageName $(storageName) -subnetName $(subnetName) -virtualNetworkName $(virtualNetworkName) -vmName $(vmName) -homeTrafficRule $(homeTrafficRule)'
      deploymentMode: 'Incremental'
      deploymentOutputs: arm_outputs
      
  - task: PowerShell@2
    inputs:
      filePath: '$(System.DefaultWorkingDirectory)/gluu-az-template/parse_arm_deployment_output.ps1'
      arguments: '-ArmOutputString ''$(arm_outputs)'' -MakeOutput'
      failOnStderr: true
    
  - task: PowerShell@2
    inputs:
      targetType: 'inline'
      script: |
        $armOutputObj = '$(arm_outputs)' | convertfrom-json
        $armOutputObj.PSObject.Properties | ForEach-Object {
            $keyname = $_.Name
            $value = $_.Value.value
            ## Creates a standard pipeline variable
            Write-Output "##vso[task.setvariable variable=$keyName;]$value"
            
            ## Creates an output variable
            Write-Output "##vso[task.setvariable variable=$keyName;isOutput=true]$value"
            Write-Host "##vso[task.setvariable variable=$keyName;]$value"
        }  

  - task: PowerShell@2
    inputs:
      targetType: 'inline'
      script: |
        $url = "$($env:SYSTEM_TEAMFOUNDATIONCOLLECTIONURI)$env:SYSTEM_TEAMPROJECTID/_apis/build/definitions/$($env:SYSTEM_DEFINITIONID)?api-version=5.0"
                Write-Host "URL: $url"
                $pipeline = Invoke-RestMethod -Uri $url -Headers @{
                    Authorization = "Bearer $env:SYSTEM_ACCESSTOKEN"
                }
                Write-Host "Pipeline = $($pipeline | ConvertTo-Json -Depth 100)"
        # Update an existing variable named cb_host to its new value 1035
          $pipeline.variables.cb_host.value = "1035"

          ####****************** update the modified object **************************
          $json = @($pipeline) | ConvertTo-Json -Depth 99
          $updatedef = Invoke-RestMethod -Uri $url -Method Put -Body $json -ContentType "application/json" -Headers @{Authorization = "Bearer $env:SYSTEM_ACCESSTOKEN"}
          write-host "==========================================================" 
          Write-host "The value of Varialbe 'cb_host' is updated to" $updatedef.variables.v1030.value
          write-host "=========================================================="


- job: update_setup_props
  dependsOn: setup_couchbase
  variables:
  - group: couchbase

  steps:
  - script: |
      echo "couchbase varialbe group test: " $(vmName)
  
  - task: PowerShell@2
    inputs:
      targetType: 'inline'
      script: |
        $armOutputObj = $(arm_outputs) | convertfrom-json
        $armOutputObj.PSObject.Properties | ForEach-Object {
            $keyname = $_.Name
            $value = $_.Value.value
            ## Creates a standard pipeline variable
            Write-Output "##vso[task.setvariable variable=$keyName;]$value"
            
            ## Creates an output variable
            Write-Output "##vso[task.setvariable variable=$keyName;isOutput=true]$value"
            Write-Host "##vso[task.setvariable variable=$keyName;]$value"
        }  

  - task: AzureCLI@2
    inputs:
      azureSubscription: 'Azure subscription 1(a84771c4-d59c-4233-8c65-9e7c8e404eac)'
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        az vm show -g $(rgName) -n $(vmName) -d --query privateIps --out tsv > tmpfile1
    displayName: 'Couchbase IP and download setup.props blob'

  - script: |
      echo update couchbase private ip 
      pvtIPadd=$(cat tmpfile1)
      echo $pvtIPadd
      ls -al 
      echo $(commandToExec) | cut -d ' ' -f 3 > tmpfile2 && cbpass=$(cat tmpfile2) && echo $cbpass
      
      echo "the task is done"   
    displayName: 'Set Variable of couchbase IP'


- job: setup_gluu_server 
  dependsOn: update_setup_props
  variables: 
  - group: naeem-gluu2
  steps:
  
  - task: AzureResourceManagerTemplateDeployment@3
    inputs:
      deploymentScope: 'Resource Group'
      azureResourceManagerConnection: 'Azure subscription 1(a84771c4-d59c-4233-8c65-9e7c8e404eac)'
      subscriptionId: 'a84771c4-d59c-4233-8c65-9e7c8e404eac'
      action: 'Create Or Update Resource Group'
      resourceGroupName: $(rgName)
      location: 'Canada Central'
      csmFile: '$(System.DefaultWorkingDirectory)/gluu-az-template/simpleLinuxVM/install_gluu.json'
      overrideParameters: '-vmName $(vmName) -_artifactsLocation "$(_artifactsLocation)" -commandToExec "$(commandToExec)"'
      deploymentMode: 'Incremental'
      deploymentOutputs: arm_outputs
  